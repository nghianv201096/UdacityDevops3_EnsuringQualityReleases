name: Azure Pipelines

trigger:
- main

variables:
  python.version: '3.7.6'
  terraformVersion: '1.3.4'
  azureServiceConnectionId: 'DevopsServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  poolName: 'test-pool'
  appName: 'devops-azure-test-app-service'

pool: 
  name: '$(poolName)'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    # - task: TerraformInstaller@0
    #   displayName: 'Terrafom installation'
    #   inputs:
    #     terraformVersion: '$(terraformVersion)'
    
    # Run Terraform Init on the pipeline agent 
    # - task: TerraformTaskV3@3
    #   displayName: 'Terraform init'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     backendServiceArm: '$(azureServiceConnectionId)'
    #     backendAzureRmResourceGroupName: 'Azuredevops'
    #     backendAzureRmStorageAccountName: 'tfstate899724623'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'test.terraform.tfstate'
   
    # - task: TerraformTaskV3@3
    #   displayName: Terraform validate
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    # - task: TerraformTaskV3@3
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
#    # Postman - Install Newman    
#    # ToDo: Update the command and verify the working directory
#    - task: CmdLine@2
#      displayName: Install Newman
#      inputs:
#        script:           # ToDo: Write your commands to install newman
#        workingDirectory: $(System.DefaultWorkingDirectory)
#    # Postman Data Validation Test Suite    
#    # ToDo: Verify the working directory and the newman scripts
#    - task: CmdLine@2
#      displayName: Run Data Validation Tests
#      continueOnError: true
#      inputs:
#        script:           # ToDo: Write your commands
#        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#    # Postman Regression Test Suite    
#    # ToDo: Update the command and verify the working directory
#    - task: CmdLine@2
#      displayName: Run Regression Tests
#      continueOnError: true
#      inputs:
#        script:           # ToDo: Write your commands
#        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#    # Postman - Publish Results 
#    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
#    - task: PublishTestResults@2
#      inputs:
#        testResultsFormat: 'JUnit'
#        testResultsFiles: '**/TEST-*.xml'
#        searchFolder:       # ToDo
#        mergeTestResults: true
#        testRunTitle:       # ToDo

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Tests'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip'
    # Selenium Test Suite - Publish the package  
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip   # Same as the archiveFile artifact above. 
    #   displayName: 'Upload Package'
    #   artifact: drop-ui-tests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # FakeRestAPI - Publish    
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
      displayName: 'Upload Package'
      artifact: drop-jmeter

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool: 
      name: '$(poolName)'
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: AzureWebApp@1
          #   displayName: 'Deploy Azure Web App'
          #   inputs:
          #     azureSubscription: $(azureServiceConnectionId)
          #     appName: $(appName)
          #     appType: webApp
          #     package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip 
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            inputs:
              script: |
                echo '-------> Path:'
                pwd

                echo '-------> Cleanning old data...'
                rm -rf tests
                echo '-------> Cleanned old data'
                
                echo '-------> Unzipping jmeter...'
                unzip '$(Build.BuildId)-jmeter.zip' -d tests
                echo '-------> Unzipped jmeter!'

                export PATH=$PATH:/home/nghianv/Desktop/Tools/apache-jmeter-5.5/bin 
                echo '-------> path with jmeter:' $PATH
                
                echo '-------> jmeter testing...'
                jmeter -n -t tests/Starter.jmx \
                  -l tests/logs/test-output.csv \
                  -e -f -o tests/logs/test-log.html \
                  -j tests/logs/jmeter.log
                echo '-------> jmeter tested'

              workingDirectory: $(Pipeline.Workspace)/drop-jmeter
              
  #--------------------------------------------#  
#  # Selenium | Functional UI Tests
#  # ToDo: 
#  - deployment: VMDeploy
#    displayName: Selenium Tests
#    environment:
#      name: '$(environmentName)'
#      resourceType: VirtualMachine
#      tags: selenium
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - download: current
#            artifact: 'drop-ui-tests'    
#          - task: Bash@3
#            inputs:
#              targetType: 'inline'
#              script: |           
#                # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
#                #! /bin/bash
#                
#                sudo apt-get upgrade -y
#                sudo apt-get install python3-pip -y
#                sudo apt-get install unzip -y
#                sudo apt-get install -y chromium-browser
#                pip3 install selenium
#                
#                #  ToDo: Add chromedriver executable to path
#                export PATH=$PATH:/path/to/chromedriver     
#                
#                # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
#                # ToDo: Direct the output of the Selenium Test Suite to a log file
                
